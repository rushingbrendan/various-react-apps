{"ast":null,"code":"import _objectSpread from \"/Users/rushing/2019-baseballTracker/react-clean/baseball-tracker/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst requestWeatherForecastsType = 'REQUEST_WEATHER_FORECASTS';\nconst receiveWeatherForecastsType = 'RECEIVE_WEATHER_FORECASTS';\nconst initialState = {\n  forecasts: [],\n  isLoading: false\n};\nexport const actionCreators = {\n  requestWeatherForecasts: startDateIndex => async (dispatch, getState) => {\n    if (startDateIndex === getState().weatherForecasts.startDateIndex) {\n      // Don't issue a duplicate request (we already have or are loading the requested data)\n      return;\n    }\n\n    dispatch({\n      type: requestWeatherForecastsType,\n      startDateIndex\n    });\n    const url = \"api/SampleData/WeatherForecasts?startDateIndex=\".concat(startDateIndex);\n    const response = await fetch(url);\n    const forecasts = await response.json();\n    dispatch({\n      type: receiveWeatherForecastsType,\n      startDateIndex,\n      forecasts\n    });\n  }\n};\nexport const reducer = (state, action) => {\n  state = state || initialState;\n\n  if (action.type === requestWeatherForecastsType) {\n    return _objectSpread({}, state, {\n      startDateIndex: action.startDateIndex,\n      isLoading: true\n    });\n  }\n\n  if (action.type === receiveWeatherForecastsType) {\n    return _objectSpread({}, state, {\n      startDateIndex: action.startDateIndex,\n      forecasts: action.forecasts,\n      isLoading: false\n    });\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/Users/rushing/2019-baseballTracker/react-clean/baseball-tracker/src/store/WeatherForecasts.js"],"names":["requestWeatherForecastsType","receiveWeatherForecastsType","initialState","forecasts","isLoading","actionCreators","requestWeatherForecasts","startDateIndex","dispatch","getState","weatherForecasts","type","url","response","fetch","json","reducer","state","action"],"mappings":";AAAA,MAAMA,2BAA2B,GAAG,2BAApC;AACA,MAAMC,2BAA2B,GAAG,2BAApC;AACA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,SAAS,EAAE,EAAb;AAAiBC,EAAAA,SAAS,EAAE;AAA5B,CAArB;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,uBAAuB,EAAEC,cAAc,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACvE,QAAIF,cAAc,KAAKE,QAAQ,GAAGC,gBAAX,CAA4BH,cAAnD,EAAmE;AACjE;AACA;AACD;;AAEDC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEX,2BAAR;AAAqCO,MAAAA;AAArC,KAAD,CAAR;AAEA,UAAMK,GAAG,4DAAqDL,cAArD,CAAT;AACA,UAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,UAAMT,SAAS,GAAG,MAAMU,QAAQ,CAACE,IAAT,EAAxB;AAEAP,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV,2BAAR;AAAqCM,MAAAA,cAArC;AAAqDJ,MAAAA;AAArD,KAAD,CAAR;AACD;AAd2B,CAAvB;AAiBP,OAAO,MAAMa,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,EAAAA,KAAK,GAAGA,KAAK,IAAIf,YAAjB;;AAEA,MAAIgB,MAAM,CAACP,IAAP,KAAgBX,2BAApB,EAAiD;AAC/C,6BACKiB,KADL;AAEEV,MAAAA,cAAc,EAAEW,MAAM,CAACX,cAFzB;AAGEH,MAAAA,SAAS,EAAE;AAHb;AAKD;;AAED,MAAIc,MAAM,CAACP,IAAP,KAAgBV,2BAApB,EAAiD;AAC/C,6BACKgB,KADL;AAEEV,MAAAA,cAAc,EAAEW,MAAM,CAACX,cAFzB;AAGEJ,MAAAA,SAAS,EAAEe,MAAM,CAACf,SAHpB;AAIEC,MAAAA,SAAS,EAAE;AAJb;AAMD;;AAED,SAAOa,KAAP;AACD,CArBM","sourcesContent":["const requestWeatherForecastsType = 'REQUEST_WEATHER_FORECASTS';\r\nconst receiveWeatherForecastsType = 'RECEIVE_WEATHER_FORECASTS';\r\nconst initialState = { forecasts: [], isLoading: false };\r\n\r\nexport const actionCreators = {\r\n  requestWeatherForecasts: startDateIndex => async (dispatch, getState) => {    \r\n    if (startDateIndex === getState().weatherForecasts.startDateIndex) {\r\n      // Don't issue a duplicate request (we already have or are loading the requested data)\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: requestWeatherForecastsType, startDateIndex });\r\n\r\n    const url = `api/SampleData/WeatherForecasts?startDateIndex=${startDateIndex}`;\r\n    const response = await fetch(url);\r\n    const forecasts = await response.json();\r\n\r\n    dispatch({ type: receiveWeatherForecastsType, startDateIndex, forecasts });\r\n  }\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n  state = state || initialState;\r\n\r\n  if (action.type === requestWeatherForecastsType) {\r\n    return {\r\n      ...state,\r\n      startDateIndex: action.startDateIndex,\r\n      isLoading: true\r\n    };\r\n  }\r\n\r\n  if (action.type === receiveWeatherForecastsType) {\r\n    return {\r\n      ...state,\r\n      startDateIndex: action.startDateIndex,\r\n      forecasts: action.forecasts,\r\n      isLoading: false\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}